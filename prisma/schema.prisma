// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id              String         @id @default(cuid())
  name            String?
  username        String?        @unique
  bio             String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  profileImage    String?
  hashedPassword  String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  hasNotification Boolean?
  followers       Follower[]
  posts           Post[]
  comments        Comment[]
  notifications   Notification[]
  Account         Account[]
}

model Post {
  id        String    @id @default(cuid())
  body      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes     Like[]

  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
}

model Notification {
  id        String   @id @default(cuid())
  body      String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Follower {
  id          String @id @default(cuid())
  user        User   @relation(fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  followerId  String

  @@index([followingId])
}

model Like {
  id     String @id @default(cuid())
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  likeId String

  @@index([postId])
}
